# Generated by CacheToSQL 2 on 19/12/2011 10:08:21 AM (UTC)

DROP TABLE IF EXISTS operand;
CREATE TABLE operand (
    operandID INT,
    operandKey TEXT,
    description TEXT,
    format TEXT,
    arg1categoryID SMALLINT,
    arg2categoryID SMALLINT,
    resultCategoryID SMALLINT,
    pythonFormat TEXT,
    PRIMARY KEY (operandID),
    INDEX arg1categoryID (arg1categoryID),
    INDEX arg2categoryID (arg2categoryID),
    INDEX resultCategoryID (resultCategoryID)
);

INSERT INTO operand (operandID, operandKey, description, format, arg1categoryID, arg2categoryID, resultCategoryID, pythonFormat) VALUES (1, 'ADD', 'add two numbers', '(%(arg1)s)+(%(arg2)s)', 4, 4, 4, '(%(arg1)s)+(%(arg2)s)');
INSERT INTO operand (operandID, operandKey, description, format, arg1categoryID, arg2categoryID, resultCategoryID, pythonFormat) VALUES (2, 'AGGM', 'add gang groupl modifier', '[%(arg1)s].AGGM(%(arg2)s)', 5, 2, 4, 'dogma.AddGangGroupModifier(env,%(arg1)s, %(arg2)s)');
INSERT INTO operand (operandID, operandKey, description, format, arg1categoryID, arg2categoryID, resultCategoryID, pythonFormat) VALUES (3, 'AGIM', 'add gang shipl modifier', '[%(arg1)s].AGIM(%(arg2)s)', 5, 2, 4, 'dogma.AddGangShipModifier(env,%(arg1)s, %(arg2)s)');
INSERT INTO operand (operandID, operandKey, description, format, arg1categoryID, arg2categoryID, resultCategoryID, pythonFormat) VALUES (4, 'AGORSM', 'add gang owner required skill modifier', '[%(arg1)s].AGORSM(%(arg2)s)', 5, 2, 4, 'dogma.AddGangOwnerRequiredSkillModifier(env,%(arg1)s, %(arg2)s)');
INSERT INTO operand (operandID, operandKey, description, format, arg1categoryID, arg2categoryID, resultCategoryID, pythonFormat) VALUES (5, 'AGRSM', 'add gang required skill modifier', '[%(arg1)s].AGRSM(%(arg2)s)', 5, 2, 4, 'dogma.AddGangRequiredSkillModifier(env,%(arg1)s, %(arg2)s)');
INSERT INTO operand (operandID, operandKey, description, format, arg1categoryID, arg2categoryID, resultCategoryID, pythonFormat) VALUES (6, 'AIM', 'add item modifier', '(%(arg1)s).AddItemModifier (%(arg2)s)', 5, 2, 4, 'dogma.AddItemModifier(env,%(arg1)s, %(arg2)s)');
INSERT INTO operand (operandID, operandKey, description, format, arg1categoryID, arg2categoryID, resultCategoryID, pythonFormat) VALUES (7, 'ALGM', 'add location group modifier', '(%(arg1)s).AddLocationGroupModifier (%(arg2)s)', 5, 2, 4, 'dogma.AddLocationGroupModifier(env,%(arg1)s, %(arg2)s)');
INSERT INTO operand (operandID, operandKey, description, format, arg1categoryID, arg2categoryID, resultCategoryID, pythonFormat) VALUES (8, 'ALM', 'add location modifier', '(%(arg1)s).AddLocationModifier (%(arg2)s)', 5, 2, 4, 'dogma.AddLocationModifier(env,%(arg1)s, %(arg2)s)');
INSERT INTO operand (operandID, operandKey, description, format, arg1categoryID, arg2categoryID, resultCategoryID, pythonFormat) VALUES (9, 'ALRSM', 'add location required skill modifier', '(%(arg1)s).ALRSM(%(arg2)s)', 5, 2, 4, 'dogma.AddLocationRequiredSkillModifier(env,%(arg1)s, %(arg2)s)');
INSERT INTO operand (operandID, operandKey, description, format, arg1categoryID, arg2categoryID, resultCategoryID, pythonFormat) VALUES (10, 'AND', 'logical and operation', '(%(arg1)s) AND (%(arg2)s)', 4, 4, 4, '(%(arg1)s and %(arg2)s)');
INSERT INTO operand (operandID, operandKey, description, format, arg1categoryID, arg2categoryID, resultCategoryID, pythonFormat) VALUES (11, 'AORSM', 'add owner required skill modifier', '(%(arg1)s).AORSM(%(arg2)s)', 5, 2, 4, 'dogma.AddOwnerRequiredSkillModifier(env,%(arg1)s, %(arg2)s)');
INSERT INTO operand (operandID, operandKey, description, format, arg1categoryID, arg2categoryID, resultCategoryID, pythonFormat) VALUES (12, 'ATT', 'attribute', '%(arg1)s->%(arg2)s', 6, 2, 3, '(%(arg1)s, %(arg2)s)');
INSERT INTO operand (operandID, operandKey, description, format, arg1categoryID, arg2categoryID, resultCategoryID, pythonFormat) VALUES (13, 'ATTACK', 'attack given ship', 'Attack', 2, 0, 4, 'Attack(env, %(arg1)s, %(arg2)s)');
INSERT INTO operand (operandID, operandKey, description, format, arg1categoryID, arg2categoryID, resultCategoryID, pythonFormat) VALUES (14, 'CARGOSCAN', 'Scans the cargo of the targeted ship.', 'CargoScan', 0, 0, 4, 'CargoScan(env, None, None)');
INSERT INTO operand (operandID, operandKey, description, format, arg1categoryID, arg2categoryID, resultCategoryID, pythonFormat) VALUES (15, 'CHEATTELEDOCK', 'Instantly enter a station.', 'CheatTeleDock()', 0, 0, 4, 'CheatTeleDock(env, None, None)');
INSERT INTO operand (operandID, operandKey, description, format, arg1categoryID, arg2categoryID, resultCategoryID, pythonFormat) VALUES (16, 'CHEATTELEGATE', 'Automatically invoke a stargate destination from remote distances.', 'CheatTeleGate()', 0, 0, 4, 'dogma.CheatTeleGate(env, None, None)');
INSERT INTO operand (operandID, operandKey, description, format, arg1categoryID, arg2categoryID, resultCategoryID, pythonFormat) VALUES (17, 'COMBINE', 'executes two statements', '%(arg1)s);     (%(arg2)s', 4, 4, 4, '%(arg1)s\\
%(arg2)s');
INSERT INTO operand (operandID, operandKey, description, format, arg1categoryID, arg2categoryID, resultCategoryID, pythonFormat) VALUES (18, 'DEC', 'decreases an item-attribute by the value of another attribute', '%(arg1)s-=self.%(arg2)s', 3, 2, 4, ' ');
INSERT INTO operand (operandID, operandKey, description, format, arg1categoryID, arg2categoryID, resultCategoryID, pythonFormat) VALUES (19, 'DECLOAKWAVE', 'broadcasts a decloaking wave', 'DecloakWave', 0, 0, 4, 'DecloakWave(env, None, None)');
INSERT INTO operand (operandID, operandKey, description, format, arg1categoryID, arg2categoryID, resultCategoryID, pythonFormat) VALUES (20, 'DECN', 'decreases an item-attribute by number', '%(arg1)s-=%(arg2)s', 3, 4, 4, ' ');
INSERT INTO operand (operandID, operandKey, description, format, arg1categoryID, arg2categoryID, resultCategoryID, pythonFormat) VALUES (21, 'DEFASSOCIATION', 'define attribute association type', '%(value)s', 0, 0, 1, 'const.dgmAss%(value)s');
INSERT INTO operand (operandID, operandKey, description, format, arg1categoryID, arg2categoryID, resultCategoryID, pythonFormat) VALUES (22, 'DEFATTRIBUTE', 'define attribute', '%(value)s', 0, 0, 2, '%(value)s');
INSERT INTO operand (operandID, operandKey, description, format, arg1categoryID, arg2categoryID, resultCategoryID, pythonFormat) VALUES (23, 'DEFBOOL', 'define bool constant', 'Bool(%(value)s)', 0, 0, 4, '%(value)s');
INSERT INTO operand (operandID, operandKey, description, format, arg1categoryID, arg2categoryID, resultCategoryID, pythonFormat) VALUES (24, 'DEFENVIDX', 'define environment index', 'Current%(value)s', 0, 0, 6, 'env[const.dgmEnv%(value)s]');
INSERT INTO operand (operandID, operandKey, description, format, arg1categoryID, arg2categoryID, resultCategoryID, pythonFormat) VALUES (25, 'DEFFLOAT', 'defines a float constant', 'Float(%(value)s)', 0, 0, 4, ' ');
INSERT INTO operand (operandID, operandKey, description, format, arg1categoryID, arg2categoryID, resultCategoryID, pythonFormat) VALUES (26, 'DEFGROUP', 'define group', '%(value)s', 0, 0, 8, ' ');
INSERT INTO operand (operandID, operandKey, description, format, arg1categoryID, arg2categoryID, resultCategoryID, pythonFormat) VALUES (27, 'DEFINT', 'defines an int constant', 'Int(%(value)s)', 0, 0, 4, '%(value)s');
INSERT INTO operand (operandID, operandKey, description, format, arg1categoryID, arg2categoryID, resultCategoryID, pythonFormat) VALUES (28, 'DEFSTRING', 'defines a string constant', '\"%(value)s\"', 0, 0, 4, '\"%(value)s\"');
INSERT INTO operand (operandID, operandKey, description, format, arg1categoryID, arg2categoryID, resultCategoryID, pythonFormat) VALUES (29, 'DEFTYPEID', 'define a type ID', 'Type(%(value)s)', 0, 0, 9, ' ');
INSERT INTO operand (operandID, operandKey, description, format, arg1categoryID, arg2categoryID, resultCategoryID, pythonFormat) VALUES (30, 'ECMBURST', 'Clears all targets on all ships(excluding self) wihin range. ', 'ECMBurst()', 0, 0, 4, 'dogma.ECMBurst(env, None, None)');
INSERT INTO operand (operandID, operandKey, description, format, arg1categoryID, arg2categoryID, resultCategoryID, pythonFormat) VALUES (31, 'EFF', 'define association type', '(%(arg2)s).(%(arg1)s)', 1, 3, 5, '(%(arg1)s, %(arg2)s)');
INSERT INTO operand (operandID, operandKey, description, format, arg1categoryID, arg2categoryID, resultCategoryID, pythonFormat) VALUES (32, 'EMPWAVE', 'broadcasts an EMP wave', 'EMPWave', 0, 0, 4, 'EMPWave(env, None, None)');
INSERT INTO operand (operandID, operandKey, description, format, arg1categoryID, arg2categoryID, resultCategoryID, pythonFormat) VALUES (33, 'EQ', 'checks for equality', '%(arg1)s == %(arg2)s', 4, 4, 4, '(%(arg1)s == %(arg2)s)');
INSERT INTO operand (operandID, operandKey, description, format, arg1categoryID, arg2categoryID, resultCategoryID, pythonFormat) VALUES (34, 'GA', 'attribute on a module group', '%(arg1)s.%(arg2)s', 8, 2, 3, '(%(arg1)s, %(arg2)s)');
INSERT INTO operand (operandID, operandKey, description, format, arg1categoryID, arg2categoryID, resultCategoryID, pythonFormat) VALUES (35, 'GET', 'calculate attribute', '%(arg1)s.%(arg2)s()', 6, 2, 4, 'dogmaLM.GetAttributeValue(%(arg1)s, %(arg2)s)');
INSERT INTO operand (operandID, operandKey, description, format, arg1categoryID, arg2categoryID, resultCategoryID, pythonFormat) VALUES (36, 'GETTYPE', 'gets type of item', '%(arg1)s.GetTypeID()', 6, 0, 9, 'env.itemTypeID');
INSERT INTO operand (operandID, operandKey, description, format, arg1categoryID, arg2categoryID, resultCategoryID, pythonFormat) VALUES (37, 'GM', 'get a module of a given groupID from a given location (ship or player)', '%(arg1)s.%(arg2)s', 6, 8, 6, 'dogma.GetModule(env,%(arg1)s,%(arg2)s)');
INSERT INTO operand (operandID, operandKey, description, format, arg1categoryID, arg2categoryID, resultCategoryID, pythonFormat) VALUES (38, 'GT', 'checks whether expression 1  is greater than expression 2', '%(arg1)s> %(arg2)s', 4, 4, 4, '(%(arg1)s > %(arg2)s)');
INSERT INTO operand (operandID, operandKey, description, format, arg1categoryID, arg2categoryID, resultCategoryID, pythonFormat) VALUES (39, 'GTE', 'checks whether an expression is greater than or equal to another', '%(arg1)s>=%(arg2)s', 4, 4, 4, '(%(arg1)s >= %(arg2)s)');
INSERT INTO operand (operandID, operandKey, description, format, arg1categoryID, arg2categoryID, resultCategoryID, pythonFormat) VALUES (40, 'IA', 'generic attribute', '%(arg1)s', 2, 0, 3, '%(arg1)s');
INSERT INTO operand (operandID, operandKey, description, format, arg1categoryID, arg2categoryID, resultCategoryID, pythonFormat) VALUES (41, 'IF', 'if construct', 'If(%(arg1)s), Then (%(arg2)s)', 4, 4, 4, 'if %(arg1)s:\\
    %(arg2)s');
INSERT INTO operand (operandID, operandKey, description, format, arg1categoryID, arg2categoryID, resultCategoryID, pythonFormat) VALUES (42, 'INC', 'increases an item-attribute by the value of another attribute', '%(arg1)s+=self.%(arg2)s', 3, 2, 4, '<handled in code>');
INSERT INTO operand (operandID, operandKey, description, format, arg1categoryID, arg2categoryID, resultCategoryID, pythonFormat) VALUES (43, 'INCN', 'increases an item-attribute by a number', '%(arg1)s+=%(arg2)s', 3, 4, 4, ' ');
INSERT INTO operand (operandID, operandKey, description, format, arg1categoryID, arg2categoryID, resultCategoryID, pythonFormat) VALUES (44, 'LAUNCH', 'launches a missile', 'LaunchMissile()', 0, 0, 4, 'dogma.Launch(env, None, None)');
INSERT INTO operand (operandID, operandKey, description, format, arg1categoryID, arg2categoryID, resultCategoryID, pythonFormat) VALUES (45, 'LAUNCHDEFENDERMISSILE', 'launches a defender missile', 'LaunchDefenderMissile()', 0, 0, 4, 'dogma.LaunchDefenderMissile(env, None, None)');
INSERT INTO operand (operandID, operandKey, description, format, arg1categoryID, arg2categoryID, resultCategoryID, pythonFormat) VALUES (46, 'LAUNCHDRONE', 'launches a drone.', 'LaunchDrone()', 0, 0, 4, 'dogma.Launch(env, None, None)');
INSERT INTO operand (operandID, operandKey, description, format, arg1categoryID, arg2categoryID, resultCategoryID, pythonFormat) VALUES (47, 'LAUNCHFOFMISSILE', 'launches an FOF missile', 'LaunchFOFMissile()', 0, 0, 4, 'dogma.LaunchFOFMissile(env, None, None)');
INSERT INTO operand (operandID, operandKey, description, format, arg1categoryID, arg2categoryID, resultCategoryID, pythonFormat) VALUES (48, 'LG', 'specify a group in a location', '%(arg1)s..%(arg2)s', 6, 8, 6, '(%(arg1)s, %(arg2)s)');
INSERT INTO operand (operandID, operandKey, description, format, arg1categoryID, arg2categoryID, resultCategoryID, pythonFormat) VALUES (49, 'LS', 'location - skill required item group', '%(arg1)s[%(arg2)s]', 6, 9, 6, '(%(arg1)s, %(arg2)s)');
INSERT INTO operand (operandID, operandKey, description, format, arg1categoryID, arg2categoryID, resultCategoryID, pythonFormat) VALUES (50, 'MINE', 'mines an asteroid', 'Mine', 0, 0, 4, 'Mine(env, None, None)');
INSERT INTO operand (operandID, operandKey, description, format, arg1categoryID, arg2categoryID, resultCategoryID, pythonFormat) VALUES (51, 'MUL', 'multiplies two numbers', '(%(arg1)s)*(%(arg2)s)', 4, 4, 4, '(%(arg1)s * %(arg2)s)');
INSERT INTO operand (operandID, operandKey, description, format, arg1categoryID, arg2categoryID, resultCategoryID, pythonFormat) VALUES (52, 'OR', 'logical or operation', '%(arg1)s OR %(arg2)s', 4, 4, 4, '(%(arg1)s or %(arg2)s)');
INSERT INTO operand (operandID, operandKey, description, format, arg1categoryID, arg2categoryID, resultCategoryID, pythonFormat) VALUES (53, 'POWERBOOST', '', 'PowerBoost', 0, 0, 4, 'dogma.PowerBoost(env, None, None)');
INSERT INTO operand (operandID, operandKey, description, format, arg1categoryID, arg2categoryID, resultCategoryID, pythonFormat) VALUES (54, 'RGGM', 'remove gang groupl modifier', '[%(arg1)s].RGGM(%(arg2)s)', 5, 2, 4, 'dogma.RemoveGangGroupModifier(env,%(arg1)s, %(arg2)s)');
INSERT INTO operand (operandID, operandKey, description, format, arg1categoryID, arg2categoryID, resultCategoryID, pythonFormat) VALUES (55, 'RGIM', 'remove gang shipl modifier', '[%(arg1)s].RGIM(%(arg2)s)', 5, 2, 4, 'dogma.RemoveGangShipModifier(env,%(arg1)s, %(arg2)s)');
INSERT INTO operand (operandID, operandKey, description, format, arg1categoryID, arg2categoryID, resultCategoryID, pythonFormat) VALUES (56, 'RGORSM', 'remove a gang owner required skill modifier', '[%(arg1)s].RGORSM(%(arg2)s)', 5, 2, 4, 'dogma.RemoveGangOwnerRequiredSkillModifier(env,%(arg1)s, %(arg2)s)');
INSERT INTO operand (operandID, operandKey, description, format, arg1categoryID, arg2categoryID, resultCategoryID, pythonFormat) VALUES (57, 'RGRSM', 'remove a gang required skill modifier', '[%(arg1)s].RGRSM(%(arg2)s)', 5, 2, 4, 'dogma.RemoveGangRequiredSkillModifier(env,%(arg1)s, %(arg2)s)');
INSERT INTO operand (operandID, operandKey, description, format, arg1categoryID, arg2categoryID, resultCategoryID, pythonFormat) VALUES (58, 'RIM', 'remove  item modifier', '(%(arg1)s).RemoveItemModifier (%(arg2)s)', 5, 2, 4, 'dogma.RemoveItemModifier(env,%(arg1)s, %(arg2)s)');
INSERT INTO operand (operandID, operandKey, description, format, arg1categoryID, arg2categoryID, resultCategoryID, pythonFormat) VALUES (59, 'RLGM', 'remove location group modifier', '(%(arg1)s).RemoveLocationGroupModifier (%(arg2)s)', 5, 2, 4, 'dogma.RemoveLocationGroupModifier(env,%(arg1)s, %(arg2)s)');
INSERT INTO operand (operandID, operandKey, description, format, arg1categoryID, arg2categoryID, resultCategoryID, pythonFormat) VALUES (60, 'RLM', 'remove location modifier', '(%(arg1)s).RemoveLocationModifier (%(arg2)s)', 5, 2, 4, 'dogma.RemoveLocationModifier(env,%(arg1)s, %(arg2)s)');
INSERT INTO operand (operandID, operandKey, description, format, arg1categoryID, arg2categoryID, resultCategoryID, pythonFormat) VALUES (61, 'RLRSM', 'remove a  required skill modifier', '(%(arg1)s).RLRSM(%(arg2)s)', 5, 2, 4, 'dogma.RemoveLocationRequiredSkillModifier(env,%(arg1)s, %(arg2)s)');
INSERT INTO operand (operandID, operandKey, description, format, arg1categoryID, arg2categoryID, resultCategoryID, pythonFormat) VALUES (62, 'RORSM', 'remove an owner required skill modifier', '(%(arg1)s).RORSM(%(arg2)s)', 5, 2, 4, 'dogma.RemoveOwnerRequiredSkillModifier(env,%(arg1)s, %(arg2)s)');
INSERT INTO operand (operandID, operandKey, description, format, arg1categoryID, arg2categoryID, resultCategoryID, pythonFormat) VALUES (63, 'RS', 'true if arg1 requires arg2', '%(arg1)s.Requires(%(arg2)s)', 6, 9, 4, 'dogma.RequireSkill(env, %(arg1)s, %(arg2)s)');
INSERT INTO operand (operandID, operandKey, description, format, arg1categoryID, arg2categoryID, resultCategoryID, pythonFormat) VALUES (64, 'RSA', 'attribute on modules that have required skill', '%(arg1)s.%(arg2)s', 9, 2, 3, '(%(arg1)s, %(arg2)s)');
INSERT INTO operand (operandID, operandKey, description, format, arg1categoryID, arg2categoryID, resultCategoryID, pythonFormat) VALUES (65, 'SET', 'sets an item attribute', '%(arg1)s := %(arg2)s', 3, 4, 4, '<handled in code>');
INSERT INTO operand (operandID, operandKey, description, format, arg1categoryID, arg2categoryID, resultCategoryID, pythonFormat) VALUES (66, 'SHIPSCAN', 'scans a ship', 'ShipScan()', 0, 0, 4, 'ShipScan(env, None, None)');
INSERT INTO operand (operandID, operandKey, description, format, arg1categoryID, arg2categoryID, resultCategoryID, pythonFormat) VALUES (67, 'SKILLCHECK', '', 'SkillCheck(%(arg1)s)', 4, 0, 4, 'dogma.SkillCheck(env, %(arg1)s, %(arg2)s)');
INSERT INTO operand (operandID, operandKey, description, format, arg1categoryID, arg2categoryID, resultCategoryID, pythonFormat) VALUES (68, 'SUB', 'subtracts a number from another one', '%(arg1)s-%(arg2)s', 4, 4, 4, ' ');
INSERT INTO operand (operandID, operandKey, description, format, arg1categoryID, arg2categoryID, resultCategoryID, pythonFormat) VALUES (69, 'SURVEYSCAN', 'scans an asteroid for information', 'SurveyScan()', 0, 0, 4, 'SurveyScan(env, None, None)');
INSERT INTO operand (operandID, operandKey, description, format, arg1categoryID, arg2categoryID, resultCategoryID, pythonFormat) VALUES (70, 'TARGETHOSTILES', 'Targets any hostile ships within range (assuming electronics have capability).', 'TargetHostiles()', 0, 0, 4, 'dogma.TargetHostiles(env, None, None)');
INSERT INTO operand (operandID, operandKey, description, format, arg1categoryID, arg2categoryID, resultCategoryID, pythonFormat) VALUES (71, 'TARGETSILENTLY', '', 'TargetSilently()', 0, 0, 4, 'dogmaLM.AddTargetEx(shipID,targetID, silent=1, tasklet=1)');
INSERT INTO operand (operandID, operandKey, description, format, arg1categoryID, arg2categoryID, resultCategoryID, pythonFormat) VALUES (72, 'TOOLTARGETSKILLS', ' ', 'CheckToolTargetSkills', 0, 0, 4, 'dogma.CheckToolTargetSkills(env,None,None)');
INSERT INTO operand (operandID, operandKey, description, format, arg1categoryID, arg2categoryID, resultCategoryID, pythonFormat) VALUES (73, 'UE', 'raises an user error', 'UserError(%(arg1)s)', 4, 0, 4, 'raise UserError(%(arg1)s)');
INSERT INTO operand (operandID, operandKey, description, format, arg1categoryID, arg2categoryID, resultCategoryID, pythonFormat) VALUES (74, 'VERIFYTARGETGROUP', 'raises a user error if incorrect target group', 'VerifyTargetGroup()', 0, 0, 4, 'dogma.VerifyTargetGroup(env, None, None)');
